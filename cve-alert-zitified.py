import requests
import json
import datetime
from datetime import date
from datetime import timedelta
import boto3
import base64
import os
from botocore.exceptions import ClientError
 
 

# Queries the NIST database for CVES that have Privileges Required: None, Attack Vector: Network, are within
# the given date range
def getCVEs( beg_date,end_date) -> list:
    cveList =[]
    url = "https://services.nvd.nist.gov/rest/json/cves/1.0/?cvssV3Metrics=AV:N/PR:N&modStartDate={}:000 UTC&modEndDate={}:000 UTC&resultsPerPage=1000".format(beg_date,end_date)
    result = requests.get(url)
    filtered = result.json()
    if("result" in filtered):
        filtered = filtered["result"]["CVE_Items"]
        for i in filtered:
            cveList.append(i)
        # print(cveList)
    print("Length of cve List: {}".format(len(cveList)))
    return cveList


# Creates a string representation of a given CVE document 
def create_message(cve):
    message = ""
    cve_id = "### ["+cve["cve"]["CVE_data_meta"]["ID"]+"](https://nvd.nist.gov/vuln/detail/{})\n".format(cve["cve"]["CVE_data_meta"]["ID"]) 
    message = message + (cve_id)
    cve_score = cve["impact"][ "baseMetricV3"]["cvssV3"]["baseScore"]
    cve_severity = cve["impact"][ "baseMetricV3"]["cvssV3"]["baseSeverity"]

    #Determining emoji marker color
    if 0.0<=cve_score<=2.4:
        emoji = ":large_green_square:"
    elif 2.5 <=cve_score<=4.9:
        emoji = ":large_yellow_square:"
    elif 5.0<=cve_score<=7.4:
        emoji = ":large_orange_square:"
    elif 7.5 <= cve_score<=8.9:
        emoji = ":large_red_square:"
    else:
        emoji = ":black_large_square:"
    #######

    cve_score = "**Base Score:** "+emoji+str(cve_score)+" "+cve_severity+emoji
    message = message + cve_score +"\n"
    cve_description = "**Description:** "+cve["cve"]["description"]["description_data"][0]["value"]
    message = message + cve_description + "\n"
    cve_date_raw = cve["publishedDate"]
    cve_mod_raw = cve["lastModifiedDate"]
    
    cve_check_date = datetime.datetime.strptime(cve_date_raw, "%Y-%m-%dT%H:%MZ")
    if(cve_check_date < datetime.datetime.now()-timedelta(days = 30)):
        return False, None
    else: 
        cve_date = "**Date Published:**"+cve_date_raw[0:10]+" "+cve_date_raw[11:16]+" UTC"
        cve_mod = "\t**Date Most Recently Modified:**"+cve_mod_raw[0:10]+" "+cve_mod_raw[11:16]+" UTC\n"
        message = message + cve_date + cve_mod
        return True, message

#Takes list of messages and sends them to a mattermost server    
def sendToMM(messages):
    import openziti
    # url = "http://localhost:8065/hooks/tdukba638jrnprun7cbnu6z4tw"
    url = "https://mattermost.tools.netfoundry.io/hooks/jn153pnkjj85zjrdimbmx9xmac"
    headers = {'Content-Type': 'application/json; charset=UTF-8'}
    if(len(messages)>0):
        print("LEngth of messages: " + str(len(messages)))
        for message in messages:
            values = '{"text": "'+message+'"}'
            values = values.encode('utf-8')
            with openziti.monkeypatch():
                response = requests.post(url, headers=headers, data=values)
                print(response.status_code)

def zitify():
    identity = open("/tmp/ziti_identity.txt", "w")
    secret_name = "cve-script-ziti-identity"
    region_name = "us-east-1"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )
    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        print(e)
    else:
        # Decrypts secret using the associated KMS key.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret_response = get_secret_value_response['SecretString']
            secret = json.loads(secret_response)
            identity.write(secret['ziti-identity'])
            # os.environ["ZITI_IDENTITIES"] = secret['ziti-identity']
            print(secret['ziti-identity'])
            os.environ["ZITI_IDENTITIES"] = "/tmp/ziti_identity.txt"
            
            
    

def do():
    now = datetime.datetime.now()
    # now = datetime.datetime(2022,7,7,12,30) #testing specific date 
    print("Now time: {}".format(now))
    end_date = now.strftime("%Y-%m-%dT%H:%M:%S")
    beg_date = (now-timedelta(minutes=15)).strftime("%Y-%m-%dT%H:%M:%S")
    cves = getCVEs(beg_date,end_date)
    messages = []
    for c in cves:
        if(create_message(c)[0]):
            messages.append(create_message(c)[1])
    print("Length of cve Messages: {}".format(len(messages)))
    sendToMM(messages)
    
   
def lambda_handler(event, context):
    zitify()
    do()
    return {
        'statusCode': 200,
    }

